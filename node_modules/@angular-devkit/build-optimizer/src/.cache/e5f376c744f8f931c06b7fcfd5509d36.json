{"remainingRequest":"/Users/scottjoscelyne/Documents/GitHub/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/scottjoscelyne/Documents/GitHub/oasis/node_modules/ngx-clipboard/fesm5/ngx-clipboard.js","dependencies":[{"path":"/Users/scottjoscelyne/Documents/GitHub/oasis/node_modules/ngx-clipboard/fesm5/ngx-clipboard.js","mtime":1594904106487},{"path":"/Users/scottjoscelyne/Documents/GitHub/oasis/node_modules/cache-loader/dist/cjs.js","mtime":1590548237416},{"path":"/Users/scottjoscelyne/Documents/GitHub/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1590548235828}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START _angular_platform_browser,ngx_window_token,_angular_common,_angular_core PURE_IMPORTS_END */\nimport { DOCUMENT } from '@angular/platform-browser';\nimport { WINDOW } from 'ngx-window-token';\nimport { CommonModule } from '@angular/common';\nimport { Inject, Injectable, Directive, EventEmitter, HostListener, Input, Output, defineInjectable, inject, NgModule } from '@angular/core';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// The following code is heavily copy from https://github.com/zenorocha/clipboard.js\nvar ClipboardService = /*@__PURE__*/ (function () {\n    function ClipboardService(document, window) {\n        this.document = document;\n        this.window = window;\n    }\n    Object.defineProperty(ClipboardService.prototype, \"isSupported\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return !!this.document.queryCommandSupported && !!this.document.queryCommandSupported('copy') && !!this.window;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    ClipboardService.prototype.isTargetValid = /**\n     * @param {?} element\n     * @return {?}\n     */\n        function (element) {\n            if (element instanceof HTMLInputElement || element instanceof HTMLTextAreaElement) {\n                if (element.hasAttribute('disabled')) {\n                    throw new Error('Invalid \"target\" attribute. Please use \"readonly\" instead of \"disabled\" attribute');\n                }\n                return true;\n            }\n            throw new Error('Target should be input or textarea');\n        };\n    /**\n     * copyFromInputElement\n     */\n    /**\n     * copyFromInputElement\n     * @param {?} targetElm\n     * @return {?}\n     */\n    ClipboardService.prototype.copyFromInputElement = /**\n     * copyFromInputElement\n     * @param {?} targetElm\n     * @return {?}\n     */\n        function (targetElm) {\n            try {\n                this.selectTarget(targetElm);\n                /** @type {?} */\n                var re = this.copyText();\n                this.clearSelection(targetElm, this.window);\n                return re && this.isCopySuccessInIE11();\n            }\n            catch (error) {\n                return false;\n            }\n        };\n    // this is for IE11 return true even if copy fail\n    // this is for IE11 return true even if copy fail\n    /**\n     * @return {?}\n     */\n    ClipboardService.prototype.isCopySuccessInIE11 =\n        // this is for IE11 return true even if copy fail\n        /**\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            var clipboardData = this.window['clipboardData'];\n            if (clipboardData && clipboardData.getData) {\n                if (!clipboardData.getData('Text')) {\n                    return false;\n                }\n            }\n            return true;\n        };\n    /**\n     * Creates a fake textarea element, sets its value from `text` property,\n     * and makes a selection on it.\n     */\n    /**\n     * Creates a fake textarea element, sets its value from `text` property,\n     * and makes a selection on it.\n     * @param {?} content\n     * @param {?=} container\n     * @return {?}\n     */\n    ClipboardService.prototype.copyFromContent = /**\n     * Creates a fake textarea element, sets its value from `text` property,\n     * and makes a selection on it.\n     * @param {?} content\n     * @param {?=} container\n     * @return {?}\n     */\n        function (content, container) {\n            if (container === void 0) {\n                container = this.window.document.body;\n            }\n            // check if the temp textarea is still belong the current container.\n            // In case we have multiple places using ngx-clipboard, one is in a modal using container but the other one is not.\n            if (this.tempTextArea && !container.contains(this.tempTextArea)) {\n                this.destroy(this.tempTextArea.parentElement);\n            }\n            if (!this.tempTextArea) {\n                this.tempTextArea = this.createTempTextArea(this.document, this.window);\n                try {\n                    container.appendChild(this.tempTextArea);\n                }\n                catch (error) {\n                    throw new Error('Container should be a Dom element');\n                }\n            }\n            this.tempTextArea.value = content;\n            return this.copyFromInputElement(this.tempTextArea);\n        };\n    // remove temporary textarea if any\n    // remove temporary textarea if any\n    /**\n     * @param {?=} container\n     * @return {?}\n     */\n    ClipboardService.prototype.destroy =\n        // remove temporary textarea if any\n        /**\n         * @param {?=} container\n         * @return {?}\n         */\n        function (container) {\n            if (container === void 0) {\n                container = this.window.document.body;\n            }\n            if (this.tempTextArea) {\n                container.removeChild(this.tempTextArea);\n                // removeChild doesn't remove the reference from memory\n                this.tempTextArea = undefined;\n            }\n        };\n    // select the target html input element\n    // select the target html input element\n    /**\n     * @private\n     * @param {?} inputElement\n     * @return {?}\n     */\n    ClipboardService.prototype.selectTarget =\n        // select the target html input element\n        /**\n         * @private\n         * @param {?} inputElement\n         * @return {?}\n         */\n        function (inputElement) {\n            inputElement.select();\n            inputElement.setSelectionRange(0, inputElement.value.length);\n            return inputElement.value.length;\n        };\n    /**\n     * @private\n     * @return {?}\n     */\n    ClipboardService.prototype.copyText = /**\n     * @private\n     * @return {?}\n     */\n        function () {\n            return this.document.execCommand('copy');\n        };\n    // Moves focus away from `target` and back to the trigger, removes current selection.\n    // Moves focus away from `target` and back to the trigger, removes current selection.\n    /**\n     * @private\n     * @param {?} inputElement\n     * @param {?} window\n     * @return {?}\n     */\n    ClipboardService.prototype.clearSelection =\n        // Moves focus away from `target` and back to the trigger, removes current selection.\n        /**\n         * @private\n         * @param {?} inputElement\n         * @param {?} window\n         * @return {?}\n         */\n        function (inputElement, window) {\n            // tslint:disable-next-line:no-unused-expression\n            inputElement && inputElement.focus();\n            window.getSelection().removeAllRanges();\n        };\n    // create a fake textarea for copy command\n    // create a fake textarea for copy command\n    /**\n     * @private\n     * @param {?} doc\n     * @param {?} window\n     * @return {?}\n     */\n    ClipboardService.prototype.createTempTextArea =\n        // create a fake textarea for copy command\n        /**\n         * @private\n         * @param {?} doc\n         * @param {?} window\n         * @return {?}\n         */\n        function (doc, window) {\n            /** @type {?} */\n            var isRTL = doc.documentElement.getAttribute('dir') === 'rtl';\n            /** @type {?} */\n            var ta;\n            ta = doc.createElement('textarea');\n            // Prevent zooming on iOS\n            ta.style.fontSize = '12pt';\n            // Reset box model\n            ta.style.border = '0';\n            ta.style.padding = '0';\n            ta.style.margin = '0';\n            // Move element out of screen horizontally\n            ta.style.position = 'absolute';\n            ta.style[isRTL ? 'right' : 'left'] = '-9999px';\n            // Move element to the same position vertically\n            /** @type {?} */\n            var yPosition = window.pageYOffset || doc.documentElement.scrollTop;\n            ta.style.top = yPosition + 'px';\n            ta.setAttribute('readonly', '');\n            return ta;\n        };\n    /** @nocollapse */ ClipboardService.ngInjectableDef = defineInjectable({ factory: function ClipboardService_Factory() { return new ClipboardService(inject(DOCUMENT), inject(WINDOW)); }, token: ClipboardService, providedIn: \"root\" });\n    return ClipboardService;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar ClipboardDirective = /*@__PURE__*/ (function () {\n    function ClipboardDirective(clipboardSrv) {\n        this.clipboardSrv = clipboardSrv;\n        this.cbOnSuccess = new EventEmitter();\n        this.cbOnError = new EventEmitter();\n    }\n    // tslint:disable-next-line:no-empty\n    // tslint:disable-next-line:no-empty\n    /**\n     * @return {?}\n     */\n    ClipboardDirective.prototype.ngOnInit =\n        // tslint:disable-next-line:no-empty\n        /**\n         * @return {?}\n         */\n        function () { };\n    /**\n     * @return {?}\n     */\n    ClipboardDirective.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this.clipboardSrv.destroy(this.container);\n        };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    ClipboardDirective.prototype.onClick = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            if (!this.clipboardSrv.isSupported) {\n                this.handleResult(false, undefined, event);\n            }\n            else if (this.targetElm && this.clipboardSrv.isTargetValid(this.targetElm)) {\n                this.handleResult(this.clipboardSrv.copyFromInputElement(this.targetElm), this.targetElm.value, event);\n            }\n            else if (this.cbContent) {\n                this.handleResult(this.clipboardSrv.copyFromContent(this.cbContent, this.container), this.cbContent, event);\n            }\n        };\n    /**\n     * Fires an event based on the copy operation result.\n     * @param succeeded\n     */\n    /**\n     * Fires an event based on the copy operation result.\n     * @private\n     * @param {?} succeeded\n     * @param {?} copiedContent\n     * @param {?} event\n     * @return {?}\n     */\n    ClipboardDirective.prototype.handleResult = /**\n     * Fires an event based on the copy operation result.\n     * @private\n     * @param {?} succeeded\n     * @param {?} copiedContent\n     * @param {?} event\n     * @return {?}\n     */\n        function (succeeded, copiedContent, event) {\n            if (succeeded) {\n                this.cbOnSuccess.emit({ isSuccess: true, content: copiedContent, event: event });\n            }\n            else {\n                this.cbOnError.emit({ isSuccess: false, event: event });\n            }\n        };\n    return ClipboardDirective;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar ClipboardModule = /*@__PURE__*/ (function () {\n    function ClipboardModule() {\n    }\n    return ClipboardModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nexport { ClipboardService, ClipboardDirective, ClipboardModule };\n//# sourceMappingURL=ngx-clipboard.js.map\n",null]}
{"remainingRequest":"/Users/scottjoscelyne/Documents/GitHub/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/scottjoscelyne/Documents/GitHub/oasis/node_modules/lodash/_arrayReduce.js","dependencies":[{"path":"/Users/scottjoscelyne/Documents/GitHub/oasis/node_modules/lodash/_arrayReduce.js","mtime":1590548239622},{"path":"/Users/scottjoscelyne/Documents/GitHub/oasis/node_modules/cache-loader/dist/cjs.js","mtime":1590548237416},{"path":"/Users/scottjoscelyne/Documents/GitHub/oasis/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1590548235828}],"contextDependencies":[],"result":["/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\nmodule.exports = arrayReduce;\n",null]}